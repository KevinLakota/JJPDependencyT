package Service.Repository;

import Model.Vulnerability;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class VulnerabilityRepository {

    public static void replaceForProject(int projectId, List<Vulnerability> vulnerabilities) {
        String archiveSql = """
            INSERT INTO vulnerability_history (project_id, package_name, package_version, source, cve_id, severity, description)
            SELECT project_id, package_name, package_version, source, cve_id, severity, description
            FROM vulnerabilities
            WHERE project_id = ?
        """;

        String deleteSql = "DELETE FROM vulnerabilities WHERE project_id = ?";
        String insertSql = """
            INSERT INTO vulnerabilities (project_id, package_name, package_version, source, cve_id, severity, description)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """;

        try (Connection conn = DatabaseManager.getConnection()) {
            conn.setAutoCommit(false);

            // Archivuj existujúce záznamy
            try (PreparedStatement archiveStmt = conn.prepareStatement(archiveSql)) {
                archiveStmt.setInt(1, projectId);
                archiveStmt.executeUpdate();
            }

            // Zmaž staré záznamy
            try (PreparedStatement deleteStmt = conn.prepareStatement(deleteSql)) {
                deleteStmt.setInt(1, projectId);
                deleteStmt.executeUpdate();
            }

            // Ulož nové záznamy
            try (PreparedStatement insertStmt = conn.prepareStatement(insertSql)) {
                for (Vulnerability vuln : vulnerabilities) {
                    insertStmt.setInt(1, projectId);
                    insertStmt.setString(2, vuln.getPackageName());
                    insertStmt.setString(3, vuln.getPackageVersion());
                    insertStmt.setString(4, vuln.getSource());
                    insertStmt.setString(5, vuln.getCveId());
                    insertStmt.setString(6, vuln.getSeverity());
                    insertStmt.setString(7, vuln.getDescription());
                    insertStmt.addBatch();
                }
                insertStmt.executeBatch();
            }

            conn.commit();
            System.out.println("Zraniteľnosti uložené pre projekt ID " + projectId);

        } catch (SQLException e) {
            System.err.println("Chyba pri ukladaní zraniteľností: " + e.getMessage());
        }
    }

    public static List<Vulnerability> getForProject(int projectId) {
        List<Vulnerability> result = new ArrayList<>();
        String sql = "SELECT package_name, package_version, source, cve_id, severity, description " +
                "FROM vulnerabilities WHERE project_id = ?";

        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, projectId);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                result.add(new Vulnerability(
                        rs.getString("package_name"),
                        rs.getString("package_version"),
                        rs.getString("source"),
                        rs.getString("cve_id"),
                        rs.getString("severity"),
                        rs.getString("description")
                ));
            }

        } catch (SQLException e) {
            System.err.println("Chyba pri načítaní zraniteľností: " + e.getMessage());
        }

        return result;
    }

    // Vráti všetky záznamy z tabuľky vulnerability_history pre daný projekt
    public static List<Vulnerability> getHistoryForProject(int projectId) {
        List<Vulnerability> result = new ArrayList<>();
        String sql = "SELECT package_name, package_version, source, cve_id, severity, description " +
                "FROM vulnerability_history WHERE project_id = ?";

        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, projectId);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                result.add(new Vulnerability(
                        rs.getString("package_name"),
                        rs.getString("package_version"),
                        rs.getString("source"),
                        rs.getString("cve_id"),
                        rs.getString("severity"),
                        rs.getString("description")
                ));
            }

        } catch (SQLException e) {
            System.err.println("Chyba pri načítaní histórie zraniteľností: " + e.getMessage());
        }

        return result;
    }

    // Skontroluje, či existuje aspoň jeden historický záznam pre daný projekt
    public static boolean hasHistoryForProject(int projectId) {
        String sql = "SELECT COUNT(*) FROM vulnerability_history WHERE project_id = ?";

        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, projectId);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                return rs.getInt(1) > 0;
            }

        } catch (SQLException e) {
            System.err.println("Chyba pri kontrole histórie: " + e.getMessage());
        }

        return false;
    }

}
